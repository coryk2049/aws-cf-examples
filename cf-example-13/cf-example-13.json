{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Deploy a VPC with 1 AZ, IGW, WebServer, ELB, ASG, SSM, and CodeDeploy agents.",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Resource Configuration Parameters"
                    },
                    "Parameters": [
                        "pmNamePrefix"
                    ]
                },
                {
                    "Label": {
                        "default": "VPC Configuration Parameters"
                    },
                    "Parameters": [
                        "pmNamePrefix",
                        "pmVpcRegion",
                        "pmAz",
                        "pmVpcCidr",
                        "pmPubSubnetCidr"
                    ]
                },
                {
                    "Label": {
                        "default": "EC2 Configuration Parameters"
                    },
                    "Parameters": [
                        "pmEc2ImageId",
                        "pmEc2InstanceType",
                        "pmEc2VolumeSize",
                        "pmEc2ServerCapacity",
                        "pmEc2AccessKeyId"
                    ]
                }
            ],
            "ParameterLabels": {
                "pmNamePrefix": {
                    "default": "Enter resource name prefix"
                },
                "pmVpcCidr": {
                    "default": "Enter VPC CIDR"
                },
                "pmVpcRegion": {
                    "default": "Enter VPC region"
                },
                "pmAz": {
                    "default": "Enter VPC AZ"
                },
                "pmPubSubnetCidr": {
                    "default": "Enter VPC public subnet"
                },
                "pmEc2ImageId": {
                    "default": "Enter EC2 image id"
                },
                "pmEc2InstanceType": {
                    "default": "Enter EC2 instance type"
                },
                "pmEc2VolumeSize": {
                    "default": "Enter EC2 volume size"
                },
                "pmEc2ServerCapacity": {
                    "default": "Enter EC2 server capacity"
                },
                "pmEc2AccessKeyId": {
                    "default": "Enter EC2 SSH access key"
                }
            }
        }
    },
    "Parameters": {
        "pmNamePrefix": {
            "Type": "String",
            "MaxLength": 15,
            "MinLength": 2,
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "Default": "bluegreen"
        },
        "pmVpcRegion": {
            "Type": "String",
            "Default": "us-east-1"
        },
        "pmVpcCidr": {
            "Type": "String",
            "Default": "10.0.0.0/16"
        },
        "pmPubSubnetCidr": {
            "Type": "String",
            "Default": "10.0.10.0/24"
        },
        "pmAz": {
            "Type": "AWS::EC2::AvailabilityZone::Name",
            "Default": "us-east-1a"
        },
        "pmEc2ImageId": {
            "Type": "String",
            "Default": "ami-28456852"
        },
        "pmEc2InstanceType": {
            "Type": "String",
            "Default": "t2.micro"
        },
        "pmEc2VolumeSize": {
            "Type": "Number",
            "Default": "5"
        },
        "pmEc2ServerCapacity": {
            "Type": "Number",
            "Default": "1",
            "MinValue": "1",
            "MaxValue": "4",
            "ConstraintDescription": "Must be between 1 and 4 server EC2 instances."
        },
        "pmEc2AccessKeyId": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Default": "aws_cory1"
        }
    },
    "Mappings": {},
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Ref": "pmVpcCidr"
                },
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "pmNamePrefix"
                                    },
                                    "-vpc"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "IGW": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "pmNamePrefix"
                                    },
                                    "-igw"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "IGWAttach": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "IGW"
                }
            }
        },
        "PublicSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "pmPubSubnetCidr"
                },
                "AvailabilityZone": {
                    "Ref": "pmAz"
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "Public"
                    },
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "pmNamePrefix"
                                    },
                                    "-public-sn"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "pmNamePrefix"
                                    },
                                    "-rtb"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "IGWAttach",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "IGW"
                }
            }
        },
        "PublicSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "BlueGreenApp": {
            "Type": "AWS::CodeDeploy::Application",
            "Properties": {
                "ApplicationName": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "pmNamePrefix"
                            },
                            "-app"
                        ]
                    ]
                }
            }
        },
        "BlueGreenDG": {
            "Type": "AWS::CodeDeploy::DeploymentGroup",
            "Properties": {
                "ApplicationName": {
                    "Ref": "BlueGreenApp"
                },
                "DeploymentGroupName": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "pmNamePrefix"
                            },
                            "-dg"
                        ]
                    ]
                },
                "ServiceRoleArn": {
                    "Fn::GetAtt": [
                        "BlueGreenDeployRole",
                        "Arn"
                    ]
                }
            }
        },
        "BlueGreenBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "pmNamePrefix"
                                    },
                                    "-deploy-bucket"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "BlueGreenWorkStationRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": "BlueGreenWorkStationRole",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "EC2TrustPolicy",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy"
                ],
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "autoscaling:*",
                                        "codedeploy:*",
                                        "ec2:*",
                                        "elasticloadbalancing:*",
                                        "iam:AddRoleToInstanceProfile",
                                        "iam:CreateInstanceProfile",
                                        "iam:CreateRole",
                                        "iam:DeleteInstanceProfile",
                                        "iam:DeleteRole",
                                        "iam:DeleteRolePolicy",
                                        "iam:GetInstanceProfile",
                                        "iam:GetRole",
                                        "iam:GetRolePolicy",
                                        "iam:ListInstanceProfilesForRole",
                                        "iam:ListRolePolicies",
                                        "iam:ListRoles",
                                        "iam:PassRole",
                                        "iam:PutRolePolicy",
                                        "iam:RemoveRoleFromInstanceProfile",
                                        "s3:*"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "BlueGreenWorkStationProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "BlueGreenWorkStationRole"
                    }
                ]
            }
        },
        "BlueGreenWorkStationSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "GroupName": "BlueGreenWorkStation-SG",
                "GroupDescription": "Enable SSH, HTTP, and HTTPS access",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "pmNamePrefix"
                                    },
                                    "-workstation-sg"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "BlueGreenWorkStation": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "IGWAttach",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "packages": {
                            "yum": {
                                "httpd": [],
                                "php": [],
                                "telnet": [],
                                "zip": [],
                                "unzip": [],
                                "tree": [],
                                "ruby": []
                            },
                            "python": {
                                "boto3": [],
                                "awscli": []
                            }
                        },
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "pmVpcRegion"
                                            },
                                            "\n",
                                            "interval=1\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.BlueGreenLaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                                            "action=/opt/aws/bin/cfn-init -v ",
                                            "         --stack ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "         --resource BlueGreenWorkStation ",
                                            "         --region ",
                                            {
                                                "Ref": "pmVpcRegion"
                                            },
                                            "\n",
                                            "runas=root\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/home/ec2-user/scripts/setupAwsProfile": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "aws configure set default.region ",
                                            {
                                                "Ref": "pmVpcRegion"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            },
                            "/home/ec2-user/scripts/updateDeploymentGroup.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "ELBName=$(aws elb describe-load-balancers \\\n",
                                            "  --query LoadBalancerDescriptions[*].LoadBalancerName --output text)\n",
                                            "DeployType=\"BLUE_GREEN,deploymentOption=WITH_TRAFFIC_CONTROL\"\n",
                                            "BlueGreenConf=\\\n",
                                            "\"terminateBlueInstancesOnDeploymentSuccess={action=KEEP_ALIVE}\"\\\n",
                                            "\",deploymentReadyOption={actionOnTimeout=CONTINUE_DEPLOYMENT}\"\\\n",
                                            "\",greenFleetProvisioningOption={action=COPY_AUTO_SCALING_GROUP}\"\n",
                                            "aws deploy update-deployment-group \\\n",
                                            "  --application-name \"",
                                            {
                                                "Ref": "BlueGreenApp"
                                            },
                                            "\" \\\n",
                                            "  --current-deployment-group-name \"",
                                            {
                                                "Ref": "BlueGreenDG"
                                            },
                                            "\" \\\n",
                                            "  --service-role-arn \"",
                                            {
                                                "Fn::GetAtt": [
                                                    "BlueGreenDeployRole",
                                                    "Arn"
                                                ]
                                            },
                                            "\" \\\n",
                                            "  --auto-scaling-groups \"",
                                            {
                                                "Ref": "BlueGreenASG"
                                            },
                                            "\" \\\n",
                                            "  --load-balancer-info elbInfoList=[{name=\"${ELBName}\"}] \\\n",
                                            "  --deployment-style \"deploymentType=${DeployType}\" \\\n",
                                            "  --blue-green-deployment-configuration \"${BlueGreenConf}\" > /dev/null\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            },
                            "/home/ec2-user/newVersion/appspec.yml": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "version: 0.0\n",
                                            "os: linux\n",
                                            "files:\n",
                                            "  - source: content/index.php\n",
                                            "    destination: /var/www/html\n",
                                            "permissions:\n",
                                            "  - object: /var/www/html/index.php\n",
                                            "    owner: ec2-user\n",
                                            "    group: ec2-user\n",
                                            "    mode: 644\n",
                                            "hooks:\n",
                                            "  BeforeInstall:\n",
                                            "    - location: scripts/beforeInstall.sh\n",
                                            "      timeout: 180\n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "group": "ec2-user",
                                "owner": "ec2-user"
                            },
                            "/home/ec2-user/newVersion/content/index.php": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "<?php\n",
                                            "$i_id = file_get_contents(\"http://instance-data/latest/meta-data/instance-id\");\n",
                                            "$i_ipv4 = file_get_contents(\"http://instance-data/latest/meta-data/local-ipv4\");\n",
                                            "echo \"<h1>Welcome to AWS CodeDeploy demo</h1>\";\n",
                                            "echo \"<h1>application version: 2.0 </h1>\";\n",
                                            "echo \"<h1>instance-id: \", $i_id, \"</h1>\";\n",
                                            "echo \"<h1>local-ipv4: \", $i_ipv4, \"</h1>\";\n",
                                            "?>\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            },
                            "/home/ec2-user/newVersion/scripts/beforeInstall.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "rm -f /var/www/html/index.php\n",
                                            "rm -f /var/www/html/index.html\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            },
                            "/home/ec2-user/scripts/pushNewVersion.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "aws deploy push \\\n",
                                            "  --application-name ",
                                            {
                                                "Ref": "BlueGreenApp"
                                            },
                                            "\\\n",
                                            "  --description \"New Version\" \\\n",
                                            "  --ignore-hidden-files \\\n",
                                            "  --s3-location s3://",
                                            {
                                                "Ref": "BlueGreenBucket"
                                            },
                                            "/newVersion.zip \\\n",
                                            "  --source /home/ec2-user/newVersion\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            },
                            "/home/ec2-user/scripts/cleanup.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "echo Removing deployment bundle from S3 bucket...\n",
                                            "aws s3 rm s3://",
                                            {
                                                "Ref": "BlueGreenBucket"
                                            },
                                            "/newVersion.zip\n",
                                            "echo Removing additional autoscaling group...\n",
                                            "aws autoscaling describe-auto-scaling-groups \\\n",
                                            "  --query 'AutoScalingGroups[].[AutoScalingGroupName,VPCZoneIdentifier]' \\\n",
                                            "  --output text | grep ",
                                            {
                                                "Ref": "PublicSubnet"
                                            },
                                            " | cut -f1 | xargs -n1 aws autoscaling delete-auto-scaling-group \\\n",
                                            "  --force-delete --auto-scaling-group-name\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            }
                        },
                        "commands": {
                            "01_setup_ec2_user_perms": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "chown -R ec2-user:ec2-user /home/ec2-user/newVersion\n",
                                            "chown -R ec2-user:ec2-user /home/ec2-user/scripts\n"
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "AvailabilityZone": {
                    "Ref": "pmAz"
                },
                "IamInstanceProfile": {
                    "Ref": "BlueGreenWorkStationProfile"
                },
                "ImageId": {
                    "Ref": "pmEc2ImageId"
                },
                "InstanceType": {
                    "Ref": "pmEc2InstanceType"
                },
                "KeyName": {
                    "Ref": "pmEc2AccessKeyId"
                },
                "NetworkInterfaces": [
                    {
                        "GroupSet": [
                            {
                                "Ref": "BlueGreenWorkStationSG"
                            }
                        ],
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "DeleteOnTermination": "true",
                        "SubnetId": {
                            "Ref": "PublicSubnet"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "pmNamePrefix"
                                    },
                                    "-workstation"
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "function error_exit\n",
                                "{\n",
                                "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource BlueGreenWorkStation",
                                " --region ",
                                {
                                    "Ref": "pmVpcRegion"
                                },
                                "\n",
                                "  exit 1\n",
                                "}\n",
                                "yum -y update\n",
                                "yum install -y aws-cfn-bootstrap\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "  --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "  --resource BlueGreenWorkStation ",
                                "  --region ",
                                {
                                    "Ref": "pmVpcRegion"
                                },
                                "\n",
                                "sudo -u ec2-user aws configure set region ",
                                {
                                    "Ref": "pmVpcRegion"
                                },
                                "\n",
                                "sudo -u ec2-user /home/ec2-user/scripts/updatedeploymentgroup.sh\n",
                                "/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'\n",
                                "/opt/aws/bin/cfn-signal -e 0 -r 'BlueGreen configuration' ",
                                "  --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "  --resource BlueGreenWorkStation ",
                                "  --region ",
                                {
                                    "Ref": "pmVpcRegion"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": "1",
                    "Timeout": "PT30M"
                }
            }
        },
        "BlueGreenDeployRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "codedeploy.amazonaws.com"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
                ]
            }
        },
        "BlueGreenInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "BlueGreenInstanceRole"
                    }
                ]
            }
        },
        "BlueGreenInstanceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy"
                ]
            }
        },
        "BlueGreenASG": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn": "IGWAttach",
            "Properties": {
                "AvailabilityZones": [
                    {
                        "Ref": "pmAz"
                    }
                ],
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PublicSubnet"
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "BlueGreenLaunchConfig"
                },
                "MinSize": "1",
                "MaxSize": "4",
                "Cooldown": "60",
                "DesiredCapacity": {
                    "Ref": "pmEc2ServerCapacity"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "BlueGreenELB"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "pmNamePrefix"
                                    },
                                    "-elb"
                                ]
                            ]
                        },
                        "PropagateAtLaunch": "true"
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT15M",
                    "Count": {
                        "Ref": "pmEc2ServerCapacity"
                    }
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinSuccessfulInstancesPercent": "100",
                    "MinInstancesInService": "1",
                    "MaxBatchSize": "1",
                    "PauseTime": "PT15M",
                    "WaitOnResourceSignals": "true"
                }
            }
        },
        "BlueGreenLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "packages": {
                            "yum": {
                                "httpd": [],
                                "php": [],
                                "telnet": [],
                                "zip": [],
                                "unzip": [],
                                "tree": [],
                                "ruby": []
                            },
                            "python": {
                                "boto3": [],
                                "awscli": []
                            }
                        },
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "pmVpcRegion"
                                            },
                                            "\n",
                                            "interval=1\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.BlueGreenLaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                                            "action=/opt/aws/bin/cfn-init -v ",
                                            "         --stack ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "         --resource BlueGreenLaunchConfig ",
                                            "         --region ",
                                            {
                                                "Ref": "pmVpcRegion"
                                            },
                                            "\n",
                                            "runas=root\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/home/ec2-user/amazon-ssm-agent.rpm": {
                                "source": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_386/amazon-ssm-agent.rpm"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/home/ec2-user/codeDeployInstall": {
                                "source": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "http://aws-codedeploy-",
                                            {
                                                "Ref": "pmVpcRegion"
                                            },
                                            ".s3.amazonaws.com/latest/install"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/var/www/html/index.php": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "<?php\n",
                                            "$i_id = file_get_contents(\"http://instance-data/latest/meta-data/instance-id\");\n",
                                            "$i_ipv4 = file_get_contents(\"http://instance-data/latest/meta-data/local-ipv4\");\n",
                                            "echo \"<h1>Welcome to AWS CodeDeploy demo</h1>\";\n",
                                            "echo \"<h1>application version: 1.0</h1>\";\n",
                                            "echo \"<h1>instance-id: \", $i_id, \"</h1>\";\n",
                                            "echo \"<h1>local-ipv4: \", $i_ipv4, \"</h1>\";\n",
                                            "?>\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "group": "root",
                                "owner": "root"
                            }
                        },
                        "commands": {
                            "01_setup_aws_ssm_agent": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "yum install -y /home/ec2-user/amazon-ssm-agent.rpm\n",
                                            "# start amazon-ssm-agent\n"
                                        ]
                                    ]
                                }
                            },
                            "02_setup_aws_code_deploy_agent": {
                                "command": "/home/ec2-user/codeDeployInstall auto"
                            },
                            "03_remove_default_index_file": {
                                "command": "rm -f /var/www/html/index.html"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "httpd": {
                                    "enabled": true,
                                    "ensureRunning": true
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "BlueGreenInstanceProfile"
                },
                "ImageId": {
                    "Ref": "pmEc2ImageId"
                },
                "InstanceType": {
                    "Ref": "pmEc2InstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "BlueGreenWorkStationSG"
                    }
                ],
                "AssociatePublicIpAddress": "true",
                "KeyName": {
                    "Ref": "pmEc2AccessKeyId"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "yum update -y\n",
                                "yum install -y aws-cfn-bootstrap\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource BlueGreenLaunchConfig ",
                                "         --region ",
                                {
                                    "Ref": "pmVpcRegion"
                                },
                                "\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource BlueGreenASG ",
                                "         --region ",
                                {
                                    "Ref": "pmVpcRegion"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "BlueGreenELB": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "DependsOn": "IGWAttach",
            "Properties": {
                "LoadBalancerName": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "pmNamePrefix"
                            },
                            "-elb"
                        ]
                    ]
                },
                "ConnectionSettings": {
                    "IdleTimeout": 1
                },
                "HealthCheck": {
                    "HealthyThreshold": "2",
                    "Interval": "15",
                    "Target": "TCP:80",
                    "Timeout": "5",
                    "UnhealthyThreshold": "2"
                },
                "Listeners": [
                    {
                        "InstancePort": "80",
                        "InstanceProtocol": "TCP",
                        "LoadBalancerPort": "80",
                        "Protocol": "TCP"
                    }
                ],
                "Scheme": "internet-facing",
                "SecurityGroups": [
                    {
                        "Ref": "BlueGreenWorkStationSG"
                    }
                ],
                "Subnets": [
                    {
                        "Ref": "PublicSubnet"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "pmNamePrefix"
                                    },
                                    "-elb"
                                ]
                            ]
                        }
                    }
                ]
            }
        }
    },
    "Outputs": {
        "VPC": {
            "Value": {
                "Ref": "VPC"
            }
        },
        "IGW": {
            "Value": {
                "Ref": "IGW"
            }
        },
        "ELB": {
            "Value": {
                "Fn::GetAtt": [
                    "BlueGreenELB",
                    "DNSName"
                ]
            }
        },
        "ASG": {
            "Value": {
                "Ref": "BlueGreenASG"
            }
        },
        "WorkStationIP": {
            "Value": {
                "Fn::GetAtt": [
                    "BlueGreenWorkStation",
                    "PublicIp"
                ]
            }
        }
    }
}