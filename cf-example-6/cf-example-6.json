{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Deploy a VPC with 2 AZ, WebServer, and ECS",
    "Parameters": {
        "pmVpcId": {
            "Description": "VPC Id (e.g. POC)",
            "Type": "String",
            "Default": "POC"
        },
        "pmVpcRegion": {
            "Description": "VPC Region",
            "Type": "String",
            "Default": "us-east-1"
        },
        "pmVpcCidr": {
            "Description": "VPC CIDR (e.g. 10.0.0.0/16)",
            "Type": "String",
            "Default": "10.0.0.0/16"
        },
        "pmPubSubnetCidr1": {
            "Description": "Public subnet CIDR 1 (e.g. 10.0.10.0/24)",
            "Type": "String",
            "Default": "10.0.10.0/24"
        },
        "pmPubSubnetCidr2": {
            "Description": "Public subnet CIDR 2 (e.g. 10.0.20.0/24)",
            "Type": "String",
            "Default": "10.0.20.0/24"
        },
        "pmPriSubnetCidr1": {
            "Description": "Private subnet CIDR 1 (e.g. 10.0.50.0/24)",
            "Type": "String",
            "Default": "10.0.50.0/24"
        },
        "pmPriSubnetCidr2": {
            "Description": "Private subnet CIDR 2 (e.g. 10.0.60.0/24)",
            "Type": "String",
            "Default": "10.0.60.0/24"
        },
        "pmAz1": {
            "Description": "AZ 1 for public and private subnets",
            "Type": "AWS::EC2::AvailabilityZone::Name",
            "Default": "us-east-1a"
        },
        "pmAz2": {
            "Description": "AZ 2 for public and private subnets",
            "Type": "AWS::EC2::AvailabilityZone::Name",
            "Default": "us-east-1b"
        },
        "pmDesiredCapacity": {
            "Type": "Number",
            "Default": "1",
            "Description": "Number of instances to launch in your ECS cluster."
        },
        "pmMaxSize": {
            "Type": "Number",
            "Default": "1",
            "MinValue": "1",
            "MaxValue": "4",
            "ConstraintDescription": "Must be between 1 and 4 EC2 instances in your ECS clsuter."
        },
        "pmEC2ImageId": {
            "Description": "EC2 image id",
            "Type": "String",
            "Default": "ami-eca289fb",
            "AllowedValues": [
                "ami-28456852",
                "ami-eca289fb",
                "ami-446f3521"
            ],
            "ConstraintDescription": "Must be a valid EC2 image id"
        },
        "pmEC2InstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium"
            ],
            "ConstraintDescription": "Must be a valid EC2 instance type"
        },
        "pmEC2VolumeSize": {
            "Description": "Volume size for EC2 instance type",
            "Type": "Number",
            "Default": "10",
            "MinValue": "5",
            "MaxValue": "1024",
            "ConstraintDescription": "Must be between 5 and 1024 Gb"
        },
        "pmAccessKeyId": {
            "Description": "Existing access key to enable SSH access to web server EC2 instance",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Default": "aws_cory1"
        }
    },
    "Mappings": {},
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Ref": "pmVpcCidr"
                },
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "pmVpcId"
                        }
                    }
                ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "|",
                                [
                                    {
                                        "Ref": "pmVpcId"
                                    },
                                    "IGW"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "pmPubSubnetCidr1"
                },
                "AvailabilityZone": {
                    "Ref": "pmAz1"
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "Public"
                    },
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "|",
                                [
                                    {
                                        "Ref": "pmPubSubnetCidr1"
                                    },
                                    {
                                        "Ref": "pmAz1"
                                    }
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "PrivateSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "pmPriSubnetCidr1"
                },
                "AvailabilityZone": {
                    "Ref": "pmAz1"
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "Private"
                    },
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "|",
                                [
                                    {
                                        "Ref": "pmPriSubnetCidr1"
                                    },
                                    {
                                        "Ref": "pmAz1"
                                    }
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "PublicSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "pmPubSubnetCidr2"
                },
                "AvailabilityZone": {
                    "Ref": "pmAz2"
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "Public"
                    },
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "|",
                                [
                                    {
                                        "Ref": "pmPubSubnetCidr2"
                                    },
                                    {
                                        "Ref": "pmAz2"
                                    }
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "PrivateSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "pmPriSubnetCidr2"
                },
                "AvailabilityZone": {
                    "Ref": "pmAz2"
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "Private"
                    },
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "|",
                                [
                                    {
                                        "Ref": "pmPriSubnetCidr2"
                                    },
                                    {
                                        "Ref": "pmAz2"
                                    }
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Public Route Table"
                    }
                ]
            }
        },
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "AttachGateway",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicSubnetRouteTableAssociation1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "PublicSubnetRouteTableAssociation2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet2"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "PrivateRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Private Route Table"
                    }
                ]
            }
        },
        "PrivateSubnetRouteTableAssociation1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnet1"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                }
            }
        },
        "PrivateSubnetRouteTableAssociation2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnet2"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                }
            }
        },
        "SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "GroupName": "POC-SG",
                "GroupDescription": "Enable SSH, HTTP, and HTTPS access",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "POC-SG"
                    }
                ]
            }
        },
        "ALB": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Name": "POC-ALB",
                "Scheme": "internet-facing",
                "SecurityGroups": [
                    {
                        "Ref": "SecurityGroup"
                    }
                ],
                "Subnets": [
                    {
                        "Ref": "PublicSubnet1"
                    },
                    {
                        "Ref": "PublicSubnet2"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "POC-ALB"
                    }
                ]
            }
        },
        "ALBListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "ALBTargetGroup"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "ALB"
                },
                "Port": "80",
                "Protocol": "HTTP"
            }
        },
        "ECSCluster": {
            "Type": "AWS::ECS::Cluster"
        },
        "ASG": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": [
                    {
                        "Ref": "pmAz1"
                    },
                    {
                        "Ref": "pmAz2"
                    }
                ],
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PublicSubnet1"
                    },
                    {
                        "Ref": "PublicSubnet2"
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "ECSLaunchConfig"
                },
                "MinSize": "1",
                "MaxSize": {
                    "Ref": "pmMaxSize"
                },
                "Cooldown": "30",
                "DesiredCapacity": {
                    "Ref": "pmDesiredCapacity"
                },
                "TargetGroupARNs": [
                    {
                        "Ref": "ALBTargetGroup"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "ASG",
                        "PropagateAtLaunch": "true"
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT15M",
                    "Count": {
                        "Ref": "pmDesiredCapacity"
                    }
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinSuccessfulInstancesPercent": "100",
                    "MinInstancesInService": "1",
                    "MaxBatchSize": "1",
                    "PauseTime": "PT15M",
                    "WaitOnResourceSignals": "true"
                }
            }
        },
        "ECSLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "packages": {
                            "yum": {
                                "awslogs": []
                            }
                        },
                        "commands": {
                            "01_add_instance_to_cluster": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "echo ECS_CLUSTER=",
                                            {
                                                "Ref": "ECSCluster"
                                            },
                                            " >> /etc/ecs/ecs.config"
                                        ]
                                    ]
                                }
                            }
                        },
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "pmVpcRegion"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                                            "action=/opt/aws/bin/cfn-init -v ",
                                            "         --stack ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "         --resource ECSLaunchConfig ",
                                            "         --region ",
                                            {
                                                "Ref": "pmVpcRegion"
                                            },
                                            "\n",
                                            "runas=root\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "services": {
                            "/etc/awslogs/awscli.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[plugins]\n",
                                            "cwlogs=cwlogs\n",
                                            "[default]\n",
                                            "region=",
                                            {
                                                "Ref": "pmVpcRegion"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "/etc/awslogs/awslogs.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[general]\n",
                                            "state_file=/var/lib/awslogs/agent-state\n",
                                            "\n",
                                            "[/var/log/dmesg]\n",
                                            "file=/var/log/dmesg\n",
                                            "log_group_name=",
                                            {
                                                "Ref": "pmVpcRegion"
                                            },
                                            "-/var/log/dmesg\n",
                                            "log_stream_name=",
                                            {
                                                "Ref": "pmVpcRegion"
                                            },
                                            "\n",
                                            "datetime_format=%b %d %H:%M:%S\n",
                                            "\n",
                                            "[/var/log/docker]\n",
                                            "file=/var/log/docker\n",
                                            "log_group_name=",
                                            {
                                                "Ref": "pmVpcRegion"
                                            },
                                            "-/var/log/docker\n",
                                            "log_stream_name=",
                                            {
                                                "Ref": "pmVpcRegion"
                                            },
                                            "\n",
                                            "datetime_format=%Y-%m-%dT%H:%M:%S.%f\n",
                                            "\n",
                                            "[/var/log/ecs/ecs-init.log]\n",
                                            "file=/var/log/ecs/ecs-init.log.*\n",
                                            "log_group_name=",
                                            {
                                                "Ref": "pmVpcRegion"
                                            },
                                            "-/var/log/ecs/ecs-init.log\n",
                                            "log_stream_name=",
                                            {
                                                "Ref": "pmVpcRegion"
                                            },
                                            "\n",
                                            "datetime_format=%Y-%m-%dT%H:%M:%SZ\n",
                                            "\n",
                                            "[/var/log/ecs/ecs-agent.log]\n",
                                            "file=/var/log/ecs/ecs-agent.log.*\n",
                                            "log_group_name=",
                                            {
                                                "Ref": "pmVpcRegion"
                                            },
                                            "-/var/log/ecs/ecs-agent.log\n",
                                            "log_stream_name=",
                                            {
                                                "Ref": "pmVpcRegion"
                                            },
                                            "\n",
                                            "datetime_format=%Y-%m-%dT%H:%M:%SZ\n",
                                            "\n",
                                            "[/var/log/ecs/audit.log]\n",
                                            "file=/var/log/ecs/audit.log.*\n",
                                            "log_group_name=",
                                            {
                                                "Ref": "pmVpcRegion"
                                            },
                                            "-/var/log/ecs/audit.log\n",
                                            "log_stream_name=",
                                            {
                                                "Ref": "pmVpcRegion"
                                            },
                                            "\n",
                                            "datetime_format=%Y-%m-%dT%H:%M:%SZ\n",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "sysvinit": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "/etc/cfn/cfn-hup.conf",
                                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                    ]
                                }
                            },
                            "awslogs": {
                                "enabled": true,
                                "ensureRunning": true,
                                "files": [
                                    "/etc/awslogs/awslogs.conf",
                                    "/etc/awslogs/awscli.conf"
                                ]
                            }
                        }
                    }
                }
            },
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "EC2InstanceProfile"
                },
                "ImageId": {
                    "Ref": "pmEC2ImageId"
                },
                "InstanceType": {
                    "Ref": "pmEC2InstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "SecurityGroup"
                    }
                ],
                "AssociatePublicIpAddress": "true",
                "KeyName": {
                    "Ref": "pmAccessKeyId"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "echo ECS_CLUSTER=",
                                {
                                    "Ref": "ECSCluster"
                                },
                                " >> /etc/ecs/ecs.config\n",
                                "yum install -y aws-cfn-bootstrap aws-cli git unzip\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource ASG ",
                                "         --region ",
                                {
                                    "Ref": "pmVpcRegion"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "EC2Role": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": "ECS-ACCESS",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "ECS-SERVICE",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ecs:CreateCluster",
                                        "ecs:DeregisterContainerInstance",
                                        "ecs:DiscoverPollEndpoint",
                                        "ecs:Poll",
                                        "ecs:RegisterContainerInstance",
                                        "ecs:StartTelemetrySession",
                                        "ecs:Submit*",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents",
                                        "ecr:BatchCheckLayerAvailability",
                                        "ecr:BatchGetImage",
                                        "ecr:GetDownloadUrlForLayer",
                                        "ecr:GetAuthorizationToken",
                                        "ec2messages:AcknowledgeMessage",
                                        "ec2messages:DeleteMessage",
                                        "ec2messages:FailMessage",
                                        "ec2messages:GetEndpoint",
                                        "ec2messages:GetMessages",
                                        "ec2messages:SendReply",
                                        "cloudwatch:PutMetricData",
                                        "ec2:DescribeInstanceStatus",
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:DescribeLogGroups",
                                        "logs:DescribeLogStreams",
                                        "logs:PutLogEvents",
                                        "s3:PutObject",
                                        "s3:GetObject",
                                        "s3:AbortMultipartUpload",
                                        "s3:ListMultipartUploadParts",
                                        "s3:ListBucket",
                                        "s3:ListBucketMultipartUploads"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "EC2InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "EC2Role"
                    }
                ]
            }
        },
        "ECSService": {
            "Type": "AWS::ECS::Service",
            "Properties": {
                "Cluster": {
                    "Ref": "ECSCluster"
                },
                "Role": {
                    "Ref": "ECSServiceRole"
                },
                "TaskDefinition": {
                    "Ref": "TaskDefinition"
                },
                "DesiredCount": "1",
                "LoadBalancers": [
                    {
                        "ContainerName": "simple-app",
                        "ContainerPort": "80",
                        "TargetGroupArn": {
                            "Ref": "ALBTargetGroup"
                        }
                    }
                ]
            }
        },
        "TaskDefinition": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "Family": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-ECS"
                        ]
                    ]
                },
                "ContainerDefinitions": [
                    {
                        "Name": "simple-app",
                        "Cpu": "10",
                        "Essential": "true",
                        "Image": "httpd:2.4",
                        "Memory": "300",
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "CloudWatchLogsGroup"
                                },
                                "awslogs-region": {
                                    "Ref": "pmVpcRegion"
                                },
                                "awslogs-stream-prefix": "ECS-POC"
                            }
                        },
                        "PortMappings": [
                            {
                                "ContainerPort": 80
                            }
                        ]
                    }
                ]
            }
        },
        "CloudWatchLogsGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-ECSLogGroup"
                        ]
                    ]
                },
                "RetentionInDays": 5
            }
        },
        "ALBTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "HealthCheckIntervalSeconds": 10,
                "HealthCheckTimeoutSeconds": 5,
                "HealthyThresholdCount": 2,
                "HealthCheckPath": "/index.html",
                "HealthCheckPort": 80,
                "Name": "Apache",
                "Port": 80,
                "Protocol": "HTTP",
                "UnhealthyThresholdCount": 5
            }
        },
        "ALBListenerRule": {
            "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
            "Properties": {
                "Actions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "ALBTargetGroup"
                        }
                    }
                ],
                "Conditions": [
                    {
                        "Field": "path-pattern",
                        "Values": [
                            "/apache.html"
                        ]
                    }
                ],
                "ListenerArn": {
                    "Ref": "ALBListener"
                },
                "Priority": 1
            }
        },
        "ECSServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ecs.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "ECS-SERVICE",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                        "elasticloadbalancing:DeregisterTargets",
                                        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                                        "elasticloadbalancing:RegisterTargets",
                                        "elasticloadbalancing:Describe*",
                                        "ec2:Describe*",
                                        "ec2:AuthorizeSecurityGroupIngress"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        }
    },
    "Outputs": {
        "VPC": {
            "Value": {
                "Ref": "VPC"
            }
        },
        "InternetGateway": {
            "Value": {
                "Ref": "InternetGateway"
            }
        },
        "URL": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt": [
                                "ALB",
                                "DNSName"
                            ]
                        }
                    ]
                ]
            }
        }
    }
}